C51 COMPILER V9.01   ADC                                                                   07/20/2022 08:46:57 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE ADC
OBJECT MODULE PLACED IN .\output\adc.obj
COMPILER INVOKED BY: D:\Paths\Keil_v5\C51\BIN\C51.EXE ECBM_LIB\adc.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\ECBM_LIB;.\
                    -device) DEBUG OBJECTEXTEND PRINT(.\output\adc.lst) OBJECT(.\output\adc.obj)

line level    source

   1          #include "ecbm_core.h"//统一加载核心头文件
   2          #if ECBM_ADC_LIB_EN   //检查本库有没有被使能
   3          /*--------------------------------------变量定义-----------------------------------*/
   4          float xdata adc_ch15;
   5          /*--------------------------------------程序定义-----------------------------------*/
   6          /*-------------------------------------------------------
   7          ADC初始化函数。
   8          -------------------------------------------------------*/
   9          void adc_init(){
  10   1          ADC_SET_REG_CFG(ECBM_ADC_CFG);//设置ADC的配置
  11   1          adc_ch15=(float)(REG_BGV)/1000.0f;//将内部电压基准取出来，防止之后idata覆盖。
  12   1      #if ECBM_ADC_IT_EN
                  ADC_IT_ENABLE;
              #endif
  15   1      #if ECBM_ADC_PWM_EN
                  ADC_PWM_ENABLE;
              #endif
  18   1      #if ECBM_MCU == 0x2815C4
                  ADC_SET_REG_EXCFG(ECBM_ADC_EXCFG);
              #endif
  21   1      #if ECBM_ADC_CH0
  22   1          gpio_mode(A00,GPIO_HZ);
  23   1      #endif
  24   1      #if ECBM_ADC_CH1
                  gpio_mode(A01,GPIO_HZ);
              #endif
  27   1      #if ECBM_ADC_CH2
                  gpio_mode(A02,GPIO_HZ);
              #endif
  30   1      #if ECBM_ADC_CH3
                  gpio_mode(A03,GPIO_HZ);
              #endif
  33   1      #if ECBM_ADC_CH4
                  gpio_mode(A04,GPIO_HZ);
              #endif
  36   1      #if ECBM_ADC_CH5
                  gpio_mode(A05,GPIO_HZ);
              #endif
  39   1      #if ECBM_ADC_CH6
                  gpio_mode(A06,GPIO_HZ);
              #endif
  42   1      #if ECBM_ADC_CH7
                  gpio_mode(A07,GPIO_HZ);
              #endif
  45   1      #if ECBM_ADC_CH8
                  gpio_mode(A08,GPIO_HZ);
              #endif
  48   1      #if ECBM_ADC_CH9
                  gpio_mode(A09,GPIO_HZ);
              #endif
  51   1      #if ECBM_ADC_CH10
                  gpio_mode(A10,GPIO_HZ);
              #endif
  54   1      #if ECBM_ADC_CH11
C51 COMPILER V9.01   ADC                                                                   07/20/2022 08:46:57 PAGE 2   

                  gpio_mode(A11,GPIO_HZ);
              #endif
  57   1      #if ECBM_ADC_CH12
                  gpio_mode(A12,GPIO_HZ);
              #endif
  60   1      #if ECBM_ADC_CH13
                  gpio_mode(A13,GPIO_HZ);
              #endif
  63   1      #if ECBM_ADC_CH14
                  gpio_mode(A14,GPIO_HZ);
              #endif
  66   1          ADC_POWER_ON;//根据手册，ADC电源打开后需要一定时间给内部电路充电。所以在初始化里打开电源。
  67   1      }
  68          /*-------------------------------------------------------
  69          查询法读取AD值函数。
  70          -------------------------------------------------------*/
  71          u16 adc_read(u8 ch){
  72   1          u16 timeout=4800;//ADC转换时间还受分频的影响，所以这里以一个较大值即2ms@24MHz的超时时间来算。
  73   1          ADC_SET_CHANNELS(ch);
  74   1          ADC_MEASURE_ON;
  75   1          _nop_();
  76   1          _nop_();
  77   1          while((!(ADC_GET_IT_FLAG))&&(timeout))timeout--;//等待转换完成。
  78   1          ADC_CLS_IT_FLAG;
  79   1          #if ECBM_ADC_8BIT//使能8位数据模式的话，编译8位读取函数。
                  return (u16)(ADC_GET_REG_RES_H8);//返回结果寄存器的值。
                  #else            //否则编译12位读取函数。
  82   1          return (u16)(ADC_GET_REG_RES_HL);//将两个结果寄存器的值组合在一起，返回一个12位数据。
  83   1          #endif
  84   1      }
  85          /*-------------------------------------------------------
  86          ADC转换开始函数（中断法）。
  87          -------------------------------------------------------*/
  88          #if ECBM_ADC_IT_EN
              void adc_read_start(u8 ch){
                  ADC_SET_CHANNELS(ch);
                  ADC_MEASURE_ON;
                  _nop_();
                  _nop_();
              }
              #endif
  96          /*-------------------------------------------------------
  97          中断法读取AD值函数。
  98          -------------------------------------------------------*/
  99          #if ECBM_ADC_IT_EN
              u16 adc_read_it(){
                  #if ECBM_ADC_8BIT//使能8位数据模式的话，编译8位读取函数。
                  return (u16)(ADC_GET_REG_RES_H8);//返回结果寄存器的值。
                  #else            //否则编译12位读取函数。
                  return (u16)(ADC_GET_REG_RES_HL);//将两个结果寄存器的值组合在一起，返回一个12位数据。
                  #endif
              }
              #endif
 108          /*-------------------------------------------------------
 109          读取电压函数。
 110          -------------------------------------------------------*/
 111          float adc_voltage(u8 ch,float vref){
 112   1          u16 jg;
 113   1          jg=adc_read(ch);//先读取AD值。
 114   1          #if ECBM_ADC_8BIT//根据设置，把AD值换算成电压值。
                  return (float)jg*vref/256.0f;//8位数据。
                  #else
C51 COMPILER V9.01   ADC                                                                   07/20/2022 08:46:57 PAGE 3   

 117   1          return (float)jg*vref/(ECBM_MCU_ADC_MAX);//10位或12位数据。
 118   1          #endif
 119   1      }
 120          /*-------------------------------------------------------
 121          开启ADC中断函数。
 122          -------------------------------------------------------*/
 123          void adc_it_start(){
 124   1          ADC_IT_ENABLE;
 125   1      }
 126          /*-------------------------------------------------------
 127          关闭ADC中断函数。
 128          -------------------------------------------------------*/
 129          void adc_it_stop(){
 130   1          ADC_IT_DISABLE;
 131   1      }
 132          /*-------------------------------------------------------
 133          ADC读取Vref函数。
 134          -------------------------------------------------------*/
 135          float adc_read_vref(void){
 136   1          u16 jg;
 137   1          jg=adc_read(15);//先读取AD值。  
 138   1          if(jg==0)return 0.0f;//防止出现NaN
 139   1          #if ECBM_ADC_8BIT//根据设置，把AD值换算成电压值。
                  return (adc_ch15*256.0f)/((float)jg);//8位数据。
                  #else
 142   1          return (adc_ch15)*(ECBM_MCU_ADC_MAX)/((float)jg);//10位或12位数据。
 143   1          #endif
 144   1      }
 145          #endif  //和最上面的#ifndef配合成一个程序段。
 146                  //以一个空行为结尾。


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    200    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      4       5
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
